// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Domain extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("subdomainCount", Value.fromI32(0));
    this.set("owner", Value.fromString(""));
    this.set("isMigrated", Value.fromBoolean(false));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Domain entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Domain entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Domain", id.toString(), this);
    }
  }

  static load(id: string): Domain | null {
    return changetype<Domain | null>(store.get("Domain", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get labelName(): string | null {
    let value = this.get("labelName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set labelName(value: string | null) {
    if (!value) {
      this.unset("labelName");
    } else {
      this.set("labelName", Value.fromString(<string>value));
    }
  }

  get labelhash(): Bytes | null {
    let value = this.get("labelhash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set labelhash(value: Bytes | null) {
    if (!value) {
      this.unset("labelhash");
    } else {
      this.set("labelhash", Value.fromBytes(<Bytes>value));
    }
  }

  get parent(): string | null {
    let value = this.get("parent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parent(value: string | null) {
    if (!value) {
      this.unset("parent");
    } else {
      this.set("parent", Value.fromString(<string>value));
    }
  }

  get subdomains(): Array<string> {
    let value = this.get("subdomains");
    return value!.toStringArray();
  }

  set subdomains(value: Array<string>) {
    this.set("subdomains", Value.fromStringArray(value));
  }

  get subdomainCount(): i32 {
    let value = this.get("subdomainCount");
    return value!.toI32();
  }

  set subdomainCount(value: i32) {
    this.set("subdomainCount", Value.fromI32(value));
  }

  get resolvedAddress(): string | null {
    let value = this.get("resolvedAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolvedAddress(value: string | null) {
    if (!value) {
      this.unset("resolvedAddress");
    } else {
      this.set("resolvedAddress", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get resolver(): string | null {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolver(value: string | null) {
    if (!value) {
      this.unset("resolver");
    } else {
      this.set("resolver", Value.fromString(<string>value));
    }
  }

  get ttl(): BigInt | null {
    let value = this.get("ttl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ttl(value: BigInt | null) {
    if (!value) {
      this.unset("ttl");
    } else {
      this.set("ttl", Value.fromBigInt(<BigInt>value));
    }
  }

  get isMigrated(): boolean {
    let value = this.get("isMigrated");
    return value!.toBoolean();
  }

  set isMigrated(value: boolean) {
    this.set("isMigrated", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("domain", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value!.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NewOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("parentDomain", Value.fromString(""));
    this.set("domain", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewOwner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NewOwner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NewOwner", id.toString(), this);
    }
  }

  static load(id: string): NewOwner | null {
    return changetype<NewOwner | null>(store.get("NewOwner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parentDomain(): string {
    let value = this.get("parentDomain");
    return value!.toString();
  }

  set parentDomain(value: string) {
    this.set("parentDomain", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value!.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NewResolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("domain", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("resolver", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewResolver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NewResolver entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NewResolver", id.toString(), this);
    }
  }

  static load(id: string): NewResolver | null {
    return changetype<NewResolver | null>(store.get("NewResolver", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value!.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }
}

export class NewTTL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("domain", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("ttl", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewTTL entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NewTTL entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NewTTL", id.toString(), this);
    }
  }

  static load(id: string): NewTTL | null {
    return changetype<NewTTL | null>(store.get("NewTTL", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    return value!.toString();
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get ttl(): BigInt {
    let value = this.get("ttl");
    return value!.toBigInt();
  }

  set ttl(value: BigInt) {
    this.set("ttl", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domains(): Array<string> {
    let value = this.get("domains");
    return value!.toStringArray();
  }

  set domains(value: Array<string>) {
    this.set("domains", Value.fromStringArray(value));
  }

  get registrations(): Array<string> | null {
    let value = this.get("registrations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set registrations(value: Array<string> | null) {
    if (!value) {
      this.unset("registrations");
    } else {
      this.set("registrations", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Registration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("registrationDate", Value.fromBigInt(BigInt.zero()));
    this.set("expiryDate", Value.fromBigInt(BigInt.zero()));
    this.set("registrant", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Registration entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Registration", id.toString(), this);
    }
  }

  static load(id: string): Registration | null {
    return changetype<Registration | null>(store.get("Registration", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string | null {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set domain(value: string | null) {
    if (!value) {
      this.unset("domain");
    } else {
      this.set("domain", Value.fromString(<string>value));
    }
  }

  get registrationDate(): BigInt {
    let value = this.get("registrationDate");
    return value!.toBigInt();
  }

  set registrationDate(value: BigInt) {
    this.set("registrationDate", Value.fromBigInt(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get cost(): BigInt | null {
    let value = this.get("cost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cost(value: BigInt | null) {
    if (!value) {
      this.unset("cost");
    } else {
      this.set("cost", Value.fromBigInt(<BigInt>value));
    }
  }

  get registrant(): string {
    let value = this.get("registrant");
    return value!.toString();
  }

  set registrant(value: string) {
    this.set("registrant", Value.fromString(value));
  }

  get labelName(): string | null {
    let value = this.get("labelName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set labelName(value: string | null) {
    if (!value) {
      this.unset("labelName");
    } else {
      this.set("labelName", Value.fromString(<string>value));
    }
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class NameRegistered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("registration", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("registrant", Value.fromString(""));
    this.set("expiryDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameRegistered entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NameRegistered entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NameRegistered", id.toString(), this);
    }
  }

  static load(id: string): NameRegistered | null {
    return changetype<NameRegistered | null>(store.get("NameRegistered", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registration(): string {
    let value = this.get("registration");
    return value!.toString();
  }

  set registration(value: string) {
    this.set("registration", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get registrant(): string {
    let value = this.get("registrant");
    return value!.toString();
  }

  set registrant(value: string) {
    this.set("registrant", Value.fromString(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class NameRenewed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("registration", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("expiryDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameRenewed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NameRenewed entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NameRenewed", id.toString(), this);
    }
  }

  static load(id: string): NameRenewed | null {
    return changetype<NameRenewed | null>(store.get("NameRenewed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registration(): string {
    let value = this.get("registration");
    return value!.toString();
  }

  set registration(value: string) {
    this.set("registration", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    return value!.toBigInt();
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class NameTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("registration", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("newOwner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NameTransferred entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NameTransferred", id.toString(), this);
    }
  }

  static load(id: string): NameTransferred | null {
    return changetype<NameTransferred | null>(store.get("NameTransferred", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registration(): string {
    let value = this.get("registration");
    return value!.toString();
  }

  set registration(value: string) {
    this.set("registration", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get newOwner(): string {
    let value = this.get("newOwner");
    return value!.toString();
  }

  set newOwner(value: string) {
    this.set("newOwner", Value.fromString(value));
  }
}

export class Resolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Resolver entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Resolver", id.toString(), this);
    }
  }

  static load(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get("Resolver", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string | null {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set domain(value: string | null) {
    if (!value) {
      this.unset("domain");
    } else {
      this.set("domain", Value.fromString(<string>value));
    }
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get addr(): string | null {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addr(value: string | null) {
    if (!value) {
      this.unset("addr");
    } else {
      this.set("addr", Value.fromString(<string>value));
    }
  }

  get contentHash(): Bytes | null {
    let value = this.get("contentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contentHash(value: Bytes | null) {
    if (!value) {
      this.unset("contentHash");
    } else {
      this.set("contentHash", Value.fromBytes(<Bytes>value));
    }
  }

  get texts(): Array<string> | null {
    let value = this.get("texts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set texts(value: Array<string> | null) {
    if (!value) {
      this.unset("texts");
    } else {
      this.set("texts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get coinTypes(): Array<BigInt> | null {
    let value = this.get("coinTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set coinTypes(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("coinTypes");
    } else {
      this.set("coinTypes", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class AddrChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("addr", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddrChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AddrChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AddrChanged", id.toString(), this);
    }
  }

  static load(id: string): AddrChanged | null {
    return changetype<AddrChanged | null>(store.get("AddrChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get addr(): string {
    let value = this.get("addr");
    return value!.toString();
  }

  set addr(value: string) {
    this.set("addr", Value.fromString(value));
  }
}

export class MulticoinAddrChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("coinType", Value.fromBigInt(BigInt.zero()));
    this.set("addr", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MulticoinAddrChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MulticoinAddrChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MulticoinAddrChanged", id.toString(), this);
    }
  }

  static load(id: string): MulticoinAddrChanged | null {
    return changetype<MulticoinAddrChanged | null>(
      store.get("MulticoinAddrChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get coinType(): BigInt {
    let value = this.get("coinType");
    return value!.toBigInt();
  }

  set coinType(value: BigInt) {
    this.set("coinType", Value.fromBigInt(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    return value!.toBytes();
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }
}

export class NameChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NameChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NameChanged", id.toString(), this);
    }
  }

  static load(id: string): NameChanged | null {
    return changetype<NameChanged | null>(store.get("NameChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class AbiChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("contentType", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AbiChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AbiChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AbiChanged", id.toString(), this);
    }
  }

  static load(id: string): AbiChanged | null {
    return changetype<AbiChanged | null>(store.get("AbiChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get contentType(): BigInt {
    let value = this.get("contentType");
    return value!.toBigInt();
  }

  set contentType(value: BigInt) {
    this.set("contentType", Value.fromBigInt(value));
  }
}

export class PubkeyChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("x", Value.fromBytes(Bytes.empty()));
    this.set("y", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PubkeyChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PubkeyChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PubkeyChanged", id.toString(), this);
    }
  }

  static load(id: string): PubkeyChanged | null {
    return changetype<PubkeyChanged | null>(store.get("PubkeyChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get x(): Bytes {
    let value = this.get("x");
    return value!.toBytes();
  }

  set x(value: Bytes) {
    this.set("x", Value.fromBytes(value));
  }

  get y(): Bytes {
    let value = this.get("y");
    return value!.toBytes();
  }

  set y(value: Bytes) {
    this.set("y", Value.fromBytes(value));
  }
}

export class TextChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("key", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TextChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TextChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TextChanged", id.toString(), this);
    }
  }

  static load(id: string): TextChanged | null {
    return changetype<TextChanged | null>(store.get("TextChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): string | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set value(value: string | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromString(<string>value));
    }
  }
}

export class ContenthashChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("hash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContenthashChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ContenthashChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ContenthashChanged", id.toString(), this);
    }
  }

  static load(id: string): ContenthashChanged | null {
    return changetype<ContenthashChanged | null>(
      store.get("ContenthashChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }
}

export class InterfaceChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("interfaceID", Value.fromBytes(Bytes.empty()));
    this.set("implementer", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InterfaceChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save InterfaceChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("InterfaceChanged", id.toString(), this);
    }
  }

  static load(id: string): InterfaceChanged | null {
    return changetype<InterfaceChanged | null>(
      store.get("InterfaceChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get interfaceID(): Bytes {
    let value = this.get("interfaceID");
    return value!.toBytes();
  }

  set interfaceID(value: Bytes) {
    this.set("interfaceID", Value.fromBytes(value));
  }

  get implementer(): Bytes {
    let value = this.get("implementer");
    return value!.toBytes();
  }

  set implementer(value: Bytes) {
    this.set("implementer", Value.fromBytes(value));
  }
}

export class AuthorisationChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("resolver", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("transactionID", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("target", Value.fromBytes(Bytes.empty()));
    this.set("isAuthorized", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuthorisationChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AuthorisationChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AuthorisationChanged", id.toString(), this);
    }
  }

  static load(id: string): AuthorisationChanged | null {
    return changetype<AuthorisationChanged | null>(
      store.get("AuthorisationChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value!.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value!.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get isAuthorized(): boolean {
    let value = this.get("isAuthorized");
    return value!.toBoolean();
  }

  set isAuthorized(value: boolean) {
    this.set("isAuthorized", Value.fromBoolean(value));
  }
}
